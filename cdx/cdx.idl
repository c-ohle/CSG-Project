
import "oaidl.idl";
import "ocidl.idl";
 
interface ICDXFactory;
interface ICDXView;
interface ICDXSink;
interface ICDXScene;
interface ICDXNode;
interface ICDXFont;

cpp_quote("#if(0)")
typedef IUnknown ICSGMesh;
typedef DECIMAL CSGVAR;
typedef DECIMAL XMFLOAT3;
typedef DECIMAL XMFLOAT4X3;
typedef DECIMAL XMFLOAT4X4;
cpp_quote("#endif")

typedef enum CDX_RENDER
{
  CDX_RENDER_BOUNDINGBOX = 0x0001,
  CDX_RENDER_COORDINATES = 0x0002,
  CDX_RENDER_NORMALS     = 0x0004,
  CDX_RENDER_WIREFRAME   = 0x0008,
  CDX_RENDER_OUTLINES    = 0x0010,
  CDX_RENDER_SHADOWS     = 0x0400,
} CDX_RENDER;

typedef enum CDX_CMD
{
  CDX_CMD_CENTER = 1, //FLOAT border
  CDX_CMD_GETBOX = 2, //XMFLOAT4X3
  CDX_CMD_GETBOXSEL = 3, //XMFLOAT4X3
  CDX_CMD_SETPLANE = 4, //XMFLOAT4X3
  CDX_CMD_PICKPLANE = 5, //XMFLOAT2
  CDX_CMD_SELECTRECT = 6, //XMFLOAT2[2]
} CDX_CMD;

typedef enum CDX_DRAW
{
  CDX_DRAW_ORTHOGRAPHIC = 0,
  CDX_DRAW_GET_TRANSFORM = 1, //XMFLOAT4X3
  CDX_DRAW_SET_TRANSFORM = 2, //XMFLOAT4X3
  CDX_DRAW_GET_COLOR = 3, //UINT
  CDX_DRAW_SET_COLOR = 4, //UINT
  CDX_DRAW_GET_FONT = 5, //ICDXFont
  CDX_DRAW_SET_FONT = 6, //ICDXFont
  CDX_DRAW_FILL_RECT = 7, //FLOAT x, FLOAT y, FLOAT dx, FLOAT dy  
  CDX_DRAW_FILL_ELLIPSE = 8, //FLOAT x, FLOAT y, FLOAT dx, FLOAT dy  
  CDX_DRAW_GET_TEXTEXTENT = 9, //FLOAT x, FLOAT y, LPCWSTR s, UINT n  
  CDX_DRAW_DRAW_TEXT = 10, //FLOAT x, FLOAT y, LPCWSTR s, UINT n  
  CDX_DRAW_DRAW_RECT = 11, //FLOAT x, FLOAT y, FLOAT dx, FLOAT dy  
} CDX_DRAW;

[object, uuid(4C0EC273-CA2F-48F4-B871-E487E2774492), pointer_default(unique)]
interface ICDXView : IUnknown
{
  [propget] HRESULT Samples([out, retval] BSTR* p);
  [propput] HRESULT Samples([in] BSTR p);
  [propget] HRESULT BkColor([out, retval] UINT* p);
  [propput] HRESULT BkColor([in] UINT p);
  [propget] HRESULT Render([out, retval] CDX_RENDER* p);
  [propput] HRESULT Render([in] CDX_RENDER p);
  [propget] HRESULT Scene([out, retval] ICDXScene** p);
  [propput] HRESULT Scene([in] ICDXScene* p);
  [propget] HRESULT Camera([out, retval] ICDXNode** p);
  [propput] HRESULT Camera([in] ICDXNode* p);
  [propget] HRESULT OverNode([out, retval] UINT* p);
  [propget] HRESULT OverPoint([out, retval] XMFLOAT3* p);
  [propget] HRESULT OverPlane([out, retval] XMFLOAT4X4* p);
  HRESULT Draw([in] CDX_DRAW idc, [in] UINT* data);
  HRESULT Command([in] CDX_CMD cmd, [in] UINT* data);
  HRESULT Thumbnail([in] UINT dx, [in] UINT dy, [in] UINT samples, [in] UINT bkcolor, [in] IStream* str);
};

[object, uuid(982A1DBA-0C12-4342-8F58-A34D83956F0D), pointer_default(unique), local]
interface ICDXSink : IUnknown
{
  void Render();
};

typedef enum CDX_UNIT
{
  CDX_UNIT_UNDEF = 0,
  CDX_UNIT_METER = 1,
  CDX_UNIT_CENTIMETER = 2,
  CDX_UNIT_MILLIMETER = 3,
  CDX_UNIT_MICRON = 4,
  CDX_UNIT_FOOT = 5,
  CDX_UNIT_INCH = 6,
} CDX_UNIT;

[object, uuid(98068F4F-7768-484B-A2F8-21D4F7B5D811), pointer_default(unique)]
interface ICDXScene : IUnknown
{
  [propget] HRESULT Unit([out, retval] CDX_UNIT* p);
  [propput] HRESULT Unit([in] CDX_UNIT p);
  [propget] HRESULT Count([out, retval] UINT* p);
  HRESULT GetNode([in] UINT i, [out, retval] ICDXNode** p);
  HRESULT Select([in] UINT i, [in] UINT f, [out, retval] UINT* p);
  HRESULT AddNode([in] BSTR name, [out, retval] ICDXNode** p);
  HRESULT Remove([in] UINT i);
  HRESULT Insert([in] UINT i, [in] ICDXNode* p);
  HRESULT Clear();
  HRESULT SaveToStream([in] IStream* s);
  HRESULT LoadFromStream([in] IStream* s);
};

[object, uuid(C0667169-81D3-405E-9C16-E4C22177BBAA), pointer_default(unique)]
interface ICDXMaterial : IUnknown
{
  [propget] HRESULT Index([out, retval] UINT* p);
  [propput] HRESULT Index([in] UINT p);
  [propget] HRESULT Length([out, retval] UINT* p);
  [propput] HRESULT Length([in] UINT p);
  [propget] HRESULT Color([out, retval] UINT* p);
  [propput] HRESULT Color([in] UINT p);
  [propget] HRESULT Texture([out, retval] IStream** p);
  [propput] HRESULT Texture([in] IStream* p);
};

[object, uuid(2BB87169-81D3-405E-9C16-E4C22177BBAA), pointer_default(unique)]
interface ICDXNode : IUnknown
{
  [propget] HRESULT Name([out, retval] BSTR* p);
  [propput] HRESULT Name([in] BSTR p);
  [propget] HRESULT Parent([out, retval] ICDXNode** p);
  [propput] HRESULT Parent([in] ICDXNode* p);
  [propget] HRESULT Scene([out, retval] ICDXScene** p);
  [propget] HRESULT Index([out, retval] UINT* p);
  [propput] HRESULT Index([in] UINT p);
  [propget] HRESULT IsSelect([out, retval] BOOL* p);
  [propput] HRESULT IsSelect([in] BOOL p);
  [propget] HRESULT IsStatic([out, retval] BOOL* p);
  [propput] HRESULT IsStatic([in] BOOL p);
  [propget] HRESULT Transform([out, retval] CSGVAR* p);
  [propput] HRESULT Transform([in] CSGVAR p);
  [propget] HRESULT Mesh([out, retval] ICSGMesh** p);
  [propput] HRESULT Mesh([in] ICSGMesh* p);
  [propget] HRESULT Color([out, retval] UINT* p);
  [propput] HRESULT Color([in] UINT p);
  [propget] HRESULT MaterialCount([out, retval] UINT* p);
  [propput] HRESULT MaterialCount([in] UINT p);
  [propget] HRESULT Tag([out, retval] IUnknown** p);
  [propput] HRESULT Tag([in] IUnknown* p);
  HRESULT GetMaterial([in] UINT i, [out] UINT* start, [out] UINT* count, [out] UINT* color, [out] IStream** tex);
  HRESULT SetMaterial([in] UINT i, [in] UINT start, [in] UINT count, [in] UINT color, [in] IStream* tex);
  HRESULT GetTexturCoords([out] CSGVAR* m);
  HRESULT SetTexturCoords([in] CSGVAR m);
  HRESULT GetTransform([in, out] CSGVAR* m);
  HRESULT SetTransform([in] CSGVAR m);
  HRESULT AddNode([in] BSTR name, [out, retval] ICDXNode** p);
};

[object, uuid(F063C32D-59D1-4A0D-B209-323268059C12), pointer_default(unique)]
interface ICDXFont : IUnknown
{
  [propget] HRESULT Name([out, retval] BSTR* p);
  [propget] HRESULT Size([out, retval] FLOAT* p);
  [propget] HRESULT Style([out, retval] UINT* p);
  [propget] HRESULT Ascent([out, retval] FLOAT* p);
  [propget] HRESULT Descent([out, retval] FLOAT* p);
  [propget] HRESULT Height([out, retval] FLOAT* p);
};

[object, uuid(f0993d73-ea2a-4bf1-b128-826d4a3ba584), pointer_default(unique)]
interface ICDXFactory : IUnknown
{
  [propget] HRESULT Version([out, retval] UINT* pVal);
  [propget] HRESULT Devices([out, retval] BSTR* p);
  HRESULT SetDevice([in] UINT id);
  HRESULT CreateView([in] HWND hwnd, [in] ICDXSink* sink, [in] UINT sampels, [out, retval] ICDXView** p);
  HRESULT CreateScene([in] UINT reserve, [out, retval] ICDXScene** p);
  HRESULT GetFont([in] BSTR name, FLOAT size, UINT style, [out, retval] ICDXFont** p);
};

[uuid(6d43a611-b5a3-489c-aa3a-dc01bb9225e8), version(1.0)]
library cdxLib
{
  importlib("stdole2.tlb");
  [uuid(4e957503-5aeb-41f2-975b-3e6ae9f9c75a)]
  coclass Factory
  {
    [default] interface ICDXFactory;
  };
};

import "shobjidl.idl";
